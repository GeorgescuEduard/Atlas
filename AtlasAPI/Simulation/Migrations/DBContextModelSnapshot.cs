// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simulation.Models;

namespace Simulation.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Simulation.Models.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityText")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ActivityUser")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueAssigneeNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueAssigneeOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueDescriptionNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueDescriptionOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueFixVersionNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueFixVersionOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueID");

                    b.Property<string>("IssueProbabilityNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueProbabilityOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueReporterNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueReporterOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueResolutionNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueResolutionOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueSeverityNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueSeverityOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueStatusNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueStatusOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueStepsToReproNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueStepsToReproOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueSummaryNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueSummaryOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueTypeNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueTypeOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ProjectNewValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ProjectOldValue")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("ActivityID");

                    b.HasIndex("IssueID");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Simulation.Models.Attachments", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AttachmentContent")
                        .HasColumnType("varbinary(8000)");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("AttachmentTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("IssueID");

                    b.HasKey("AttachmentID");

                    b.HasIndex("IssueID");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Simulation.Models.Comments", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CommentUser")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueID");

                    b.HasKey("CommentID");

                    b.HasIndex("IssueID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Simulation.Models.Issues", b =>
                {
                    b.Property<string>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueAssignee")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("IssueCreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueFixVersion")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime?>("IssueModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("IssueProbability")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueReporter")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueResolution")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueSeverity")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueStatus")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueStepsToRepro")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueSummary")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Project")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserId");

                    b.HasKey("IssueID");

                    b.HasIndex("UserId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Simulation.Models.Projects", b =>
                {
                    b.Property<string>("ProjectKEY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ProjectText")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ProjectTime")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ProjectKEY");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Simulation.Models.Versions", b =>
                {
                    b.Property<int>("VersionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IssueAssignee")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("IssueCreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueFixVersion")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueID");

                    b.Property<DateTime?>("IssueModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("IssueProbability")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueReporter")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueResolution")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueSeverity")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueStatus")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IssueStepsToRepro")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueSummary")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Project")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("VersionTag")
                        .HasColumnType("varchar(30)");

                    b.HasKey("VersionID");

                    b.HasIndex("IssueID");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("Simulation.Models.UserAccount", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Access")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AssigneedProject")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ExpCode")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(30)");

                    b.HasDiscriminator().HasValue("UserAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Simulation.Models.Activity", b =>
                {
                    b.HasOne("Simulation.Models.Issues", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID");
                });

            modelBuilder.Entity("Simulation.Models.Attachments", b =>
                {
                    b.HasOne("Simulation.Models.Issues", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID");
                });

            modelBuilder.Entity("Simulation.Models.Comments", b =>
                {
                    b.HasOne("Simulation.Models.Issues", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID");
                });

            modelBuilder.Entity("Simulation.Models.Issues", b =>
                {
                    b.HasOne("Simulation.Models.UserAccount", "UserAccount")
                        .WithMany("Issue")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Simulation.Models.Versions", b =>
                {
                    b.HasOne("Simulation.Models.Issues", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID");
                });
#pragma warning restore 612, 618
        }
    }
}
